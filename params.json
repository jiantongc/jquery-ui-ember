{"tagline":"emberjs, jquery, jqueryui","name":"JQuery UI in EmberJS","body":"jquery-ui-ember\r\n==================\r\nForked Luke Melia's <a href='https://github.com/lukemelia/jquery-ui-ember'>jquery-ui-ember repo</a>. While working onit, found out that same View cannot have two jquery UI Interactions because of overriding of 'uioptions', 'uitype', 'uievents' variables and values. So to avoid the problem had to create different mixins for draggable, droppable, resizeable as they are the main ones that can be mixed with other jquery UI types.\r\n\r\n\r\nQuick start\r\n-----------\r\n\r\nNow same view can have two different jquery UI Interactions. \r\n\r\nHow to Use\r\n----------\r\nFirst you may want to go through <a href=\"http://www.lukemelia.com/blog/archives/2012/03/10/using-ember-js-with-jquery-ui/\">Luke's blog</a> how exactly the a view of Ember.js can have jqueryUI implemented.\r\nBut this only works when a Ember View requires only one Jquery UI widget/interaction. So as to make a view have multiple JqueryUI interactions following mixins are added.\r\n\r\n<pre>\r\n// Drag Interaction Mixin\r\nJQ.Draggable = Em.Mixin.create( JQ.DragWidget, {\r\n  uiDragOptions: ['disabled_drag', 'addClasses_drag', 'appendTo_drag', 'axis_drag', 'cancel_drag', 'connectToSortable_drag', 'containment_drag', 'cursor_drag', \r\n              'delay_drag', 'distance_drag', 'grid_drag', 'handle_drag','helper_drag','iframeFix_drag','opacity_drag','scope_drag', 'snap_drag', 'snapMode_drag', 'stack_drag'],\r\n  uiDragEvents: ['create_drag', 'start_drag', 'drag_drag', 'stop_drag'],\r\n});\r\n\r\n//Drop Interaction Mixin\r\nJQ.Droppable = Em.Mixin.create( JQ.DropWidget, {\r\n  uiDropOptions: ['accept_drop', 'accept_drop', 'addClasses_drop', 'disabled_drop', 'greedy_drop', 'hoverClass_drop', 'scope_drop','tolerance_drop' ],\r\n  uiDropEvents: ['create_drop', 'activate_drop', 'deactivate_drop', 'over_drop', 'out_drop', 'drop_drop'],\r\n\r\n});\r\n\r\n//Resize Interaction Mixin\r\nJQ.Resizable = Ember.Mixin.create( JQ.ResizeWidget, {\r\n    uiResizeOptions: ['disabled_resize', 'alsoResize_resize', 'animate_resize', 'animateDuration_resize', 'animateEasing_resize', 'aspectRatio_resize', 'autoHide_resize', 'cancel_resize', \r\n              'containment_resize', 'delay_resize', 'distance_resize', 'ghost_resize', 'grid_resize', 'handles_resize', 'helper_resize', 'maxHeight_resize', 'maxWidth_resize', 'minHeight_resize',\r\n              'minWidth_resize'],\r\n    uiResizeEvents: ['create_resize', 'start_resize', 'resize_resize', 'stop_resize']\r\n});\r\n</pre>\r\n\r\nNow you can use these mixins like following.\r\n\r\n<pre>\r\nApp.ResizeDragDiv = App.BlockView.extend(JQ.Resizable, JQ.Draggable, {\r\n  template:Ember.Handlebars.compile('Resize & DRAG'),\r\n  classNames: ['backcolor'],\r\n  resize_resize:function(){\r\n    //console.log(this);\r\n  },\r\n  drag_drag: function(){\r\n    //console.log(this);\r\n  },\r\n  stop_resize:function(){\r\n    //console.log(this);\r\n  }\r\n});\r\n</pre>\r\nRun index.html in the repo to check the example.\r\nYou can add more interaction the same way.\r\n\r\nnew to opensource and github, so let me know any issues\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}